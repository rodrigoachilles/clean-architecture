package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"

	"github.com/rodrigoachilles/clean-architecture/internal/infra/graph/model"
	"github.com/rodrigoachilles/clean-architecture/internal/usecase"
)

// CreateOrder is the resolver for the createOrder field.
func (r *mutationResolver) CreateOrder(ctx context.Context, input model.OrderInput) (*model.Order, error) {
	dto := usecase.OrderInputDTO{
		ProductName: input.ProductName,
		Price:       input.Price,
		Tax:         input.Tax,
	}
	output, err := r.CreateOrderUseCase.Execute(dto)
	if err != nil {
		return nil, err
	}

	return &model.Order{
		ID:          output.ID.String(),
		ProductName: output.ProductName,
		Price:       output.Price,
		Tax:         output.Tax,
		FinalPrice:  output.FinalPrice,
	}, nil
}

// ListOrders is the resolver for the listOrders field.
func (r *queryResolver) ListOrders(ctx context.Context, input model.ListPageInput) ([]*model.Order, error) {
	dto := usecase.ListOrderInputDTO{
		Page:  input.Page,
		Limit: input.Limit,
		Sort:  input.Sort,
	}
	output, err := r.ListOrdersUseCase.Execute(dto)
	if err != nil {
		return nil, err
	}

	var orders []*model.Order
	for _, order := range *output.Orders {
		orders = append(orders, &model.Order{
			ID:          order.ID.String(),
			ProductName: order.ProductName,
			Price:       order.Price,
			Tax:         order.Tax,
			FinalPrice:  order.FinalPrice,
		})
	}

	return orders, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
